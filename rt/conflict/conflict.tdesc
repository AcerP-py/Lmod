-- -*- lua -*-

local testName = "conflict"

testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {testName },

   active = true,
   testName = testName,
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     MODULEPATH=$(testDir)/mf;  export MODULEPATH

     rm -fr _stderr.* _stdout.* err.* out.* .lmod.d .lmodrc.lua .cache .config
     cp $(projectDir)/init/lmodrc.lua .lmodrc.lua

     runLmod --version                                      # 1
     runLmod load a b                                       # 2
     runLmod load c                                         # 3
     runLmod list                                           # 4
     runLmod swap a c                                       # 5
     runLmod list                                           # 6
     runLmod load e/2.0                                     # 7
     runLmod load d                                         # 8
     runLmod load e/1.0                                     # 9
     runLmod load d                                         #10
     runLmod load f                                         #11
     runLmod load x/1.5                                     #12
     runLmod load y                                         #13

     runLmod purge                                          #14
     unsetMT
     export MODULEPATH=$(testDir)/mf2/Core
     export LMOD_CONFIG_DIR=$(testDir)/configDir
     runLmod load base acme                                 #15
     runLmod save                                           #16
     runLmod restore                                        #17

     

     HOME=$ORIG_HOME

     cat _stdout.[0-9][0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f results.csv
     wrapperDiff --csv results.csv $(testDir)/out.txt out.txt
     wrapperDiff --csv results.csv $(testDir)/err.txt err.txt
     testFinish -r $(resultFn) -t $(runtimeFn) results.csv
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
